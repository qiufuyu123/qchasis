#THIS PROGRAM IS ENCRYPTED BY qiufuy
#DO NOT TRY TO REVERSE ENGINEERING!
import base64
lll11ll=exec
lll11l1=base64.b64decode
out="I1B5dGhvbiAzLngKdmVyc2lvbiA9IDUKaW1wb3J0IHN1YnByb2Nlc3MKaW1wb3J0IHN5cwppbXBvcnQgcmVxdWVzdHMKaW1wb3J0IG9zCnRyeToKICAgIGltcG9ydCB5YW1sCmV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgIHByaW50KCdEZXRlY3QgdGhhdCBweXlhbWwgaXMgTk9UIGluc3RhbGxlZCAsIG5vdyBpbnN0YWxsIGl0IScpCiAgICBvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIHB5eWFtbCcpCiAgICBwcmludCgnRmluaXNoZWQsIFBsZWFzZSByZXN0YXJ0IHRoZSBwcm9ncmFtJykKICAgIG9zLl9leGl0KDApCmRlZiBwcmludGVycihzKToKICAgIHByaW50KCJcMDMzWzA7MzE7NDBtIitzKyJcMDMzWzBtIikKZGVmIHByaW50b2socyk6CiAgICBwcmludCgiXDAzM1swOzMyOzQwbSIrcysiXDAzM1swbSIpCmRlZiBwcmludHdhcm4ocyk6CiAgICBwcmludCgiXDAzM1swOzMzOzQwbSIrcysiXDAzM1swbSIpCmhlYWRlcnMgPSB7CiAgICAiVXNlci1BZ2VudCI6ICJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTA0LjAuMC4wIFNhZmFyaS81MzcuMzYiLAp9CmRlZiB2ZXJjb2RlKHJlcyk6CiAgICBpZiByZXNbMF09PScvJyBhbmQgcmVzWzFdPT0nKicgYW5kIHJlc1syXT09JyonOgogICAgICAgIHJldHVybiByZXMKICAgIHJldHVybiAiIgpkZWYgZ2V0cHkoKToKICAgIHJlcyA9IHJlcXVlc3RzLmdldCgiaHR0cHM6Ly9xaXVmdXl1MTIzLmdpdGh1Yi5pby9xY2hhc2lzLTEyM2Etc2VydmVyL3FnZW4ucHkiLGhlYWRlcnM9aGVhZGVycykuY29udGVudC5kZWNvZGUoKQogICAgaWYgcmVzWzBdID09ICcjJzoKICAgICAgICByZXR1cm4gcmVzCiAgICByZXR1cm4gJycKZGVmIGdldGRvdGgoKToKICAgIHJlcyA9IHJlcXVlc3RzLmdldCgiaHR0cHM6Ly9xaXVmdXl1MTIzLmdpdGh1Yi5pby9xY2hhc2lzLTEyM2Etc2VydmVyL3FjaGFzaXMuaCIsaGVhZGVycz1oZWFkZXJzKS5jb250ZW50LmRlY29kZSgpCiAgICByZXR1cm4gdmVyY29kZShyZXMpCmRlZiBnZXRkb3RjcHAoKToKICAgIHJlcyA9IHJlcXVlc3RzLmdldCgiaHR0cHM6Ly9xaXVmdXl1MTIzLmdpdGh1Yi5pby9xY2hhc2lzLTEyM2Etc2VydmVyL3FjaGFzaXMuY3BwIixoZWFkZXJzPWhlYWRlcnMpLmNvbnRlbnQuZGVjb2RlKCkKICAgIHJldHVybiB2ZXJjb2RlKHJlcykKZGVmIGdldGNmZygpOgogICAgcmVzID0gcmVxdWVzdHMuZ2V0KCJodHRwczovL3FpdWZ1eXUxMjMuZ2l0aHViLmlvL3FjaGFzaXMtMTIzYS1zZXJ2ZXIvdmVyLnlhbWwiLGhlYWRlcnM9aGVhZGVycykuY29udGVudC5kZWNvZGUoKQogICAgaWYgcmVzWzBdPT0ndicgYW5kIHJlc1sxXSA9PSAnZSc6CiAgICAgICAgcmV0dXJuIHJlcwogICAgcmV0dXJuICcnCmRlZiB2YWxpZGNmZyhzKToKICAgIHJldHVybiAndmVyJyBpbiBzIGFuZCAnd2hlZWxzJyBpbiBzIGFuZCAnbGVmdF9tb3RvcnMnIGluIHMgYW5kICdyaWdodF9tb3RvcnMnIGluIHMKZGVmIHVwZGF0ZXNyYygpOgogICAgcHJpbnQoIltSRUNWXSBxY2hhc2lzLmggLi4uIixlbmQ9JycsZmx1c2g9VHJ1ZSkKICAgIGNvZGVoID0gZ2V0ZG90aCgpCiAgICBpZiBjb2RlaCA9PSAnJzoKICAgICAgICBwcmludGVycignW0ZBSUxdOiBGb3JtYXQgUmVjZWl2ZWQgRXJyb3IhJykKICAgICAgICByZXR1cm4gRmFsc2UKICAgIHByaW50b2soJ1tET05FXScpCiAgICBwcmludCgiW1JFQ1ZdIHFjaGFzaXMuY3BwIC4uLiIsZW5kPScnLGZsdXNoPVRydWUpCiAgICBjb2RlY3BwID0gZ2V0ZG90Y3BwKCkKICAgIGlmIGNvZGVjcHAgPT0gJyc6CiAgICAgICAgcHJpbnRlcnIoJ1tGQUlMXTogRm9ybWF0IFJlY2VpdmVkIEVycm9yIScpCiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICBwcmludG9rKCdbRE9ORV0nKQogICAgdHJ5OgogICAgICAgIHdpdGggb3BlbigncXRlbXBsYXRlL3FjaGFzaXMuaC50JywndycsZW5jb2Rpbmc9J3V0Zi04JywgbmV3bGluZT0nJykgYXMgZjoKICAgICAgICAgICAgZi53cml0ZShjb2RlaCkKICAgICAgICB3aXRoIG9wZW4oJ3F0ZW1wbGF0ZS9xY2hhc2lzLmNwcC50JywndycsZW5jb2Rpbmc9J3V0Zi04JyxuZXdsaW5lPScnKSBhcyBmOgogICAgICAgICAgICBmLndyaXRlKGNvZGVjcHApCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgcHJpbnRlcnIoJ0ZhaWwgdG8gY3JlYXRlKHdyaXRlKSBmaWxlIScpCiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICByZXR1cm4gVHJ1ZQpkZWYgeWVzb3JubygpOgogICAgcmVzID0gaW5wdXQoIlt5L25dKHllcyBvciBubyk6IikKICAgIGlmIHJlcyA9PSAneScgb3IgcmVzID09ICdZJzoKICAgICAgICByZXR1cm4gVHJ1ZQogICAgcmV0dXJuIEZhbHNlCmRlZiBybWRpcmYocyk6CiAgICBmb3Igcm9vdCwgZGlycywgZmlsZXMgaW4gb3Mud2FsayhzLCB0b3Bkb3duPUZhbHNlKToKICAgICAgICBmb3IgbmFtZSBpbiBmaWxlczoKICAgICAgICAgICAgb3MucmVtb3ZlKG9zLnBhdGguam9pbihyb290LCBuYW1lKSkKICAgICAgICBmb3IgbmFtZSBpbiBkaXJzOgogICAgICAgICAgICBvcy5ybWRpcihvcy5wYXRoLmpvaW4ocm9vdCwgbmFtZSkpCiAgICBvcy5ybWRpcihzKQogICAgCmRlZiBiYWNrdXAoKToKICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cygnc3JjL3FjaGFzaXMuY3BwJykgb3Igbm90IG9zLnBhdGguZXhpc3RzKCdpbmNsdWRlL3FjaGFzaXMuaCcpOgogICAgICAgIHJldHVybiBUcnVlCiAgICB0cnk6CiAgICAgICAgd2l0aCBvcGVuKCdzcmMvcWNoYXNpcy5jcHAnLCdyJyxuZXdsaW5lPScnLGVuY29kaW5nPSd1dGYtOCcpIGFzIGY6CiAgICAgICAgICAgIGN0eCA9IGYucmVhZCgpCiAgICAgICAgICAgIHdpdGggb3Blbignc3JjL3FjaGFzaXMuY3BwLmJhaycsJ3cnLG5ld2xpbmU9JycsZW5jb2Rpbmc9J3V0Zi04JykgYXMgZjI6CiAgICAgICAgICAgICAgICBmMi53cml0ZShjdHgpCiAgICAgICAgd2l0aCBvcGVuKCdpbmNsdWRlL3FjaGFzaXMuaCcsJ3InLG5ld2xpbmU9JycsZW5jb2Rpbmc9J3V0Zi04JykgYXMgZjoKICAgICAgICAgICAgY3R4ID0gZi5yZWFkKCkKICAgICAgICAgICAgd2l0aCBvcGVuKCdpbmNsdWRlL3FjaGFzaXMuaC5iYWsnLCd3JyxuZXdsaW5lPScnLGVuY29kaW5nPSd1dGYtOCcpIGFzIGYyOgogICAgICAgICAgICAgICAgZjIud3JpdGUoY3R4KQogICAgICAgIG9zLnJlbW92ZSgnc3JjL3FjaGFzaXMuY3BwJykKICAgICAgICBvcy5yZW1vdmUoJ2luY2x1ZGUvcWNoYXNpcy5oJykKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBwcmludChlKQogICAgICAgIHByaW50ZXJyKCdGYWlsIHRvIGJhY2t1cCBmaWxlIScpCiAgICAgICAgcmV0dXJuIEZhbHNlCmRlZiBjcmVhdGVlbnYoKToKICAgIHByaW50b2soIk5vdywgc3RhcnQgdG8gZG93bmxvYWQgdGhlIGxhdGVzdCB0ZW1wbGF0ZSBmcm9tIHNlcnZlciIpCiAgICB0cnk6CiAgICAgICAgcm1kaXJmKCdxdGVtcGxhdGUvJykKICAgIGV4Y2VwdCBGaWxlTm90Rm91bmRFcnJvciBhcyBlOgogICAgICAgIHByaW50b2soIkNyZWF0ZSAncXRlbXBsYXRlJyBEaXIiKQogICAgb3MubWtkaXIoJ3F0ZW1wbGF0ZScpCiAgICBpZiBub3QgdXBkYXRlc3JjKCk6CiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICBwcmludCgiW1JFQ1ZdIHZlci55YW1sIC4uLiIsZW5kPScnLGZsdXNoPVRydWUpCiAgICByZXMgPSBnZXRjZmcoKQogICAgcHJpbnRvaygiW0RPTkVdIikKICAgIHRyeToKICAgICAgICB3aXRoIG9wZW4oJ3F0ZW1wbGF0ZS9jaGFzaXMueWFtbCcsJ3cnLG5ld2xpbmU9JycpIGFzIGY6CiAgICAgICAgICAgIGYud3JpdGUocmVzKQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHByaW50ZXJyKCJGYWlsIHRvIHdyaXRlIGBjaGFzaXMueWFtbGAiKQogICAgICAgIHJldHVybiBGYWxzZQogICAgY2ZnID0geWFtbC5sb2FkKHJlcyx5YW1sLkZ1bGxMb2FkZXIpCiAgICBwcmludCgiVmFsaWRhdGluZyBjb25maWcgLi4uIixlbmQ9JycsZmx1c2g9VHJ1ZSkKICAgIGlmIG5vdCB2YWxpZGNmZyhjZmcpOgogICAgICAgIHByaW50ZXJyKCdJbnZhbGlkIGNvbmZpZyBmaWxlIGZvcm1hdCEnKQogICAgICAgIHJldHVybiBGYWxzZQogICAgcHJpbnRvaygiW0RPTkVdIikKICAgIHByaW50d2FybigiRGV0ZWN0ZWQgb2xkIGBxY2hhc2lzLmNwcGAgYW5kIGBxY2hhc2lzLmhgLCBcblRvIGNvbnRpbnVlLCBhcmUgeW91IHN1cmUgdG8gZGVsZXRlIHRoZW0/XG5BIGJhY2t1cCBmaWxlIHdpbGwgYmUgY3JlYXRlZCwgZG8gbm90IHdvcnJ5IGFib3V0IGxvc2luZyB5b3VyIGZpbGUuIikKICAgIGlmIG5vdCB5ZXNvcm5vKCk6CiAgICAgICAgcHJpbnRlcnIoJ09wZXJhdGlvbiBBYm9ydCBieSB1c2VyJykKICAgICAgICByZXR1cm4gVHJ1ZQogICAgcHJpbnQoJ0JhY2t1cCBvbGQgcWNoYXNpcyBmaWxlcy4uLicsZW5kPScnLGZsdXNoPVRydWUpCiAgICBiYWNrdXAoKQogICAgcHJpbnRvaygnW0RPTkVdJykKICAgIHJldHVybiBUcnVlCmRlZiBjaGVja2VudigpOgogICAgaWYgKG5vdCBvcy5wYXRoLmV4aXN0cygncXRlbXBsYXRlL2NoYXNpcy55YW1sJykpIG9yIFwKICAgICAgICAobm90IG9zLnBhdGguZXhpc3RzKCdxdGVtcGxhdGUvcWNoYXNpcy5oLnQnKSBvciBcCiAgICAgICAgKG5vdCBvcy5wYXRoLmV4aXN0cygncXRlbXBsYXRlL3FjaGFzaXMuY3BwLnQnKSkpOgogICAgICAgIHJldHVybiBGYWxzZQogICAgcmV0dXJuIFRydWUKCmRlZiBwcm9tcHQoKToKICAgIHByaW50b2soIi0tLS0tLS0tLS0gUS1nZW4gYnkgcWl1ZnV5dSAtLS0tLS0tLS0tIikKICAgIHByaW50KCJBcmcgTGlzdDoiKQogICAgcHJpbnQoIiAgbWFrZSAgIDogIEdlbmVyYXRlIGZyb20gdGVtcGxhdGUiKQogICAgcHJpbnQoIiAgYnVpbGQgIDogIG1ha2UgJiBjb21waWxlIHVzZSBwcm9zIikKICAgIHByaW50KCIgIHVwZGF0ZSA6ICBEb3dubG9hZCBMYXRlc3QgdGVtcGxhdGUgZnJvbSBzZXJ2ZXIiKQogICAgcHJpbnQoIiAgdXBsb2FkIDogIE9OTFkgdXBsb2FkIikKICAgIHByaW50KCIgIHVwZGF0ZWM6ICBVcGRhdGUgcWdlbiBzY3JpcHQiKQogICAgcHJpbnQoIiAgdmVyICAgIDogIFByaW50IHZlcnNpb24gaW5mb3JtYXRpb24iKQoKc2NyaXB0ID0gJycnCkBzZXQgUEFUSD0lUEFUSCU7JVVTRVJQUk9GSUxFJVxcQXBwRGF0YVxcUm9hbWluZ1xcQ29kZVxcVXNlclxcZ2xvYmFsU3RvcmFnZVxcc2lnYm90cy5wcm9zXFxpbnN0YWxsXFxwcm9zLWNsaS13aW5kb3dzCkBzZXQgUFJPU19UT09MQ0hBSU49JVVTRVJQUk9GSUxFJVxcQXBwRGF0YVxcUm9hbWluZ1xcQ29kZVxcVXNlclxcZ2xvYmFsU3RvcmFnZVxcc2lnYm90cy5wcm9zXFxpbnN0YWxsXFxwcm9zLXRvb2xjaGFpbi13aW5kb3dzXFx1c3IKJycnCgpkZWYgbmVlZHVwZGF0ZSgpOgogICAgdHJ5OgogICAgICAgIHdpdGggb3BlbigncXRlbXBsYXRlL2NoYXNpcy55YW1sJywncicsZW5jb2Rpbmc9J3V0Zi04JykgYXMgZjoKICAgICAgICAgICAgcmVzID0gZi5yZWFkKCkKICAgICAgICByZXM9eWFtbC5sb2FkKHJlcyx5YW1sLkZ1bGxMb2FkZXIpCiAgICAgICAgaWYgbm90IHZhbGlkY2ZnKHJlcyk6CiAgICAgICAgICAgIHByaW50KCdCYWQgRm9ybWF0IGZvciBjaGFzaXMueWFtbCEnKQogICAgICAgICAgICByZXR1cm4gMAogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHByaW50ZXJyKCdGYWlsIHRvIGxvYWQgY2hhc2lzLnlhbWwhJykKICAgICAgICByZXR1cm4gMAogICAgY3VyID0gaW50KHJlc1sndmVyJ10pCiAgICBwcmludCgnTG9vayB1cCB1cGRhdGUgaW4gc2VydmVyIC4uLicsZW5kPScnLGZsdXNoPSBUcnVlKQogICAgbmV0ID0gZ2V0Y2ZnKCkKICAgIGlmIG5ldCA9PSAnJzoKICAgICAgICBwcmludGVycignQ2Fubm90IERvd25sb2FkIHJlbW90ZSBjb25maWchJykKICAgICAgICByZXR1cm4gMAogICAgbmV0ID0geWFtbC5sb2FkKG5ldCx5YW1sLkZ1bGxMb2FkZXIpCiAgICBub3cgPSBpbnQobmV0Wyd2ZXInXSkKICAgIHByaW50b2soJ1tET05FXScpCiAgICBwcmludCgnQ3VycmVudCBWZXJzaW9uOiAnK3N0cihjdXIpKycgLCBMYXRlc3QgVmVyc2lvbjogJytzdHIobm93KSkKICAgIGlmIG5vdyA9PSBjdXI6CiAgICAgICAgcmV0dXJuIDAKICAgIHJldHVybiBub3cKCmRlZiBydW5jbWQoY21kKToKICAgIHByaW50KCdHZW5lcmF0ZSBBdXRvIENvbXBpbGUgU2NyaXB0Li4uJyxlbmQ9JycpCiAgICB0cnk6CiAgICAgICAgd2l0aCBvcGVuKCdxbWFrZS5iYXQnLCd3JyxlbmNvZGluZz0ndXRmLTgnLG5ld2xpbmU9JycpIGFzIGY6CiAgICAgICAgICAgIGYud3JpdGUoc2NyaXB0K2NtZCkKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBwcmludGVycignRmFpbCB0byB3cml0ZSBBdXRvIENvbXBpbGUgU2NyaXB0IScpCiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICBwcmludG9rKCdbRE9ORV0nKQogICAgcHJpbnQoJ1dhaXQgZm9yIFBST1MgQ0xJIHJlc3BvbnNlIC4uLicpCiAgICBpZiBvcy5zeXN0ZW0oJ3FtYWtlLmJhdCcpIT0wOgogICAgICAgIHByaW50ZXJyKCdQUk9TIFByb2Nlc3MgRVJST1IhJykKICAgICAgICByZXR1cm4gRmFsc2UKICAgIGVsc2U6CiAgICAgICAgcHJpbnQoIlN1Y2Nlc3MhIikKICAgIHByaW50KCJDbGVhbiB1cCBlbnZpcm9ubWVudC4uLiAiLGVuZD0nJykKICAgIG9zLnJlbW92ZSgncW1ha2UuYmF0JykKICAgIHJldHVybiBUcnVlCgpkZWYgYnVpbGQoaXNwcm9zKToKICAgIGJhY2t1cCgpCiAgICBwcmludHdhcm4oJyoqKioqKioqKioqKioqKiBRR0VOICoqKioqKioqKioqKioqKicpCiAgICBwcmludCAgICAoJyogQ3JlYXRlZCBCeSBxaXVmdXl1IGZyb20gMTIzQSAgICAgKicpCiAgICBwcmludCAgICAoJyogQ29uZmlnOiBjaGFzaXMueWFtbCBUQVNLOiBCVUlMRCAgKicpCiAgICBwcmludHdhcm4oJyoqKioqKioqKioqKioqKiBRR0VOICoqKioqKioqKioqKioqKicpCiAgICB0cnk6CiAgICAgICAgd2l0aCBvcGVuKCdxdGVtcGxhdGUvY2hhc2lzLnlhbWwnLCdyJyxlbmNvZGluZz0ndXRmLTgnKSBhcyBmOgogICAgICAgICAgICBjZmcgPSB5YW1sLmxvYWQoZi5yZWFkKCkseWFtbC5GdWxsTG9hZGVyKQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHByaW50ZXJyKCdGYWlsIHRvIGxvYWQgY2hhc2lzLnlhbWwhJykKICAgICAgICByZXR1cm4gRmFsc2UKICAgIGlmIG5vdCB2YWxpZGNmZyhjZmcpOgogICAgICAgIHByaW50ZXJyKCdCYWQgRm9ybWF0IGluIGNoYXNpcy55YW1sIScpCiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICB0cnk6CiAgICAgICAgd2l0aCBvcGVuKCdxdGVtcGxhdGUvcWNoYXNpcy5oLnQnLCdyJyxlbmNvZGluZz0ndXRmLTgnKSBhcyBmOgogICAgICAgICAgICBjb2RlaCA9IGYucmVhZCgpCiAgICAgICAgd2l0aCBvcGVuKCdxdGVtcGxhdGUvcWNoYXNpcy5jcHAudCcsJ3InLGVuY29kaW5nPSd1dGYtOCcpIGFzIGY6CiAgICAgICAgICAgIGNvZGVjcHAgPSBmLnJlYWQoKQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHByaW50KGUpCiAgICAgICAgcHJpbnRlcnIoJ0ZhaWwgdG8gbG9hZCB0ZW1wbGF0ZSBmaWxlJykKICAgICAgICByZXR1cm4gRmFsc2UKICAgIHByaW50KCdHZW5lcmF0ZSBgcWNoYXNpcy5oYCB3aXRoIGBjaGFzaXMueWFtbGAgLi4uJyxlbmQ9JycsZmx1c2g9VHJ1ZSkKICAgIGNvZGVoID0gY29kZWgucmVwbGFjZSgne2x3Zn0nLHN0cihhYnMoY2ZnWydsZWZ0X21vdG9ycyddWydmcm9udCddKSkpLnJlcGxhY2UoJ3tsd219JyxzdHIoYWJzKGNmZ1snbGVmdF9tb3RvcnMnXVsnbWlkJ10pKSkucmVwbGFjZSgne2x3Yn0nLHN0cihhYnMoY2ZnWydsZWZ0X21vdG9ycyddWydiYWNrJ10pKSkKICAgIGNvZGVoID0gY29kZWgucmVwbGFjZSgne3J3Zn0nLHN0cihhYnMoY2ZnWydyaWdodF9tb3RvcnMnXVsnZnJvbnQnXSkpKS5yZXBsYWNlKCd7cndtfScsc3RyKGFicyhjZmdbJ3JpZ2h0X21vdG9ycyddWydtaWQnXSkpKS5yZXBsYWNlKCd7cndifScsc3RyKGFicyhjZmdbJ3JpZ2h0X21vdG9ycyddWydiYWNrJ10pKSkKICAgIGNvZGVjcHAgPSBjb2RlY3BwLnJlcGxhY2UoJ3tyZXZsMX0nLHN0cignLScgaWYgKGNmZ1snbGVmdF9tb3RvcnMnXVsnZnJvbnQnXTwwKSBlbHNlICcnKSkucmVwbGFjZSgne3JldmwyfScsc3RyKCctJyBpZiAoY2ZnWydsZWZ0X21vdG9ycyddWydtaWQnXTwwKSBlbHNlICcnKSkucmVwbGFjZSgne3JldmwzfScsc3RyKCctJyBpZiAoY2ZnWydsZWZ0X21vdG9ycyddWydiYWNrJ108MCkgZWxzZSAnJykpCiAgICBjb2RlY3BwID0gY29kZWNwcC5yZXBsYWNlKCd7cmV2cjF9JyxzdHIoJy0nIGlmIChjZmdbJ3JpZ2h0X21vdG9ycyddWydmcm9udCddPDApIGVsc2UgJycpKS5yZXBsYWNlKCd7cmV2cjJ9JyxzdHIoJy0nIGlmIChjZmdbJ3JpZ2h0X21vdG9ycyddWydtaWQnXSk8MCBlbHNlICcnKSkucmVwbGFjZSgne3JldnIzfScsc3RyKCctJyBpZiAoY2ZnWydyaWdodF9tb3RvcnMnXVsnYmFjayddKTwwIGVsc2UgJycpKQogICAgY29kZWggPSBjb2RlaC5yZXBsYWNlKCd7cmV2bDF9JyxzdHIoJ3RydWUnIGlmIChjZmdbJ2xlZnRfbW90b3JzJ11bJ2Zyb250J108MCkgZWxzZSAnZmFsc2UnKSkucmVwbGFjZSgne3JldmwyfScsc3RyKCd0cnVlJyBpZiAoY2ZnWydsZWZ0X21vdG9ycyddWydtaWQnXTwwKSBlbHNlICdmYWxzZScpKS5yZXBsYWNlKCd7cmV2bDN9JyxzdHIoJ3RydWUnIGlmIChjZmdbJ2xlZnRfbW90b3JzJ11bJ2JhY2snXTwwKSBlbHNlICdmYWxzZScpKQogICAgY29kZWggPSBjb2RlaC5yZXBsYWNlKCd7cmV2cjF9JyxzdHIoJ3RydWUnIGlmIChjZmdbJ3JpZ2h0X21vdG9ycyddWydmcm9udCddPDApIGVsc2UgJ2ZhbHNlJykpLnJlcGxhY2UoJ3tyZXZyMn0nLHN0cigndHJ1ZScgaWYgKGNmZ1sncmlnaHRfbW90b3JzJ11bJ21pZCddKTwwIGVsc2UgJ2ZhbHNlJykpLnJlcGxhY2UoJ3tyZXZyM30nLHN0cigndHJ1ZScgaWYgKGNmZ1sncmlnaHRfbW90b3JzJ11bJ2JhY2snXSk8MCBlbHNlICdmYWxzZScpKQogICAgY29kZWggPSBjb2RlaC5yZXBsYWNlKCd7Z3lyb30nLHN0cihjZmdbJ2d5cm8nXSkpCiAgICB3aGVlbHMgPSBjZmdbJ3doZWVscyddCiAgICBwaWRzID0gY2ZnWydwaWRzJ10KICAgIGNvZGVoID0gY29kZWgucmVwbGFjZSgne3JwbX0nLHN0cih3aGVlbHNbJ3JwbSddKSkucmVwbGFjZSgne2RpYW1ldGVyfScsc3RyKHdoZWVsc1snZGlhbWV0ZXInXSkpLnJlcGxhY2UoJ3t0cmFja30nLHN0cih3aGVlbHNbJ3RyYWNrJ10pKQogICAgY29kZWggPSBjb2RlaC5yZXBsYWNlKCd7Z2Vhcm51bX0nLCdwcm9zOjpFX01PVE9SX0dFQVJfJytzdHIod2hlZWxzWydnZWFyJ10pLnVwcGVyKCkpLnJlcGxhY2UoJ3tnZWFyY29sb3J9Jywnb2thcGk6OkFic3RyYWN0TW90b3I6OmdlYXJzZXQ6Oicrc3RyKHdoZWVsc1snZ2VhciddKSkKICAgIGNvZGVoID0gY29kZWgucmVwbGFjZSgne3RlYW19JyxjZmdbJ3RlYW0nXSkKICAgIGNvZGVoID0gY29kZWgucmVwbGFjZSgne3BpZHNfZHJpdmVfa3B9JyxzdHIocGlkc1snZHJpdmUnXVsna3AnXSkpLnJlcGxhY2UoJ3twaWRzX2RyaXZlX2tkfScsc3RyKHBpZHNbJ2RyaXZlJ11bJ2tkJ10pKS5yZXBsYWNlKCd7cGlkc19kcml2ZV9rc30nLHN0cihwaWRzWydkcml2ZSddWydrcyddKSkKICAgIGNvZGVoID0gY29kZWgucmVwbGFjZSgne3BpZHNfYW5nbGVfa3B9JyxzdHIocGlkc1snYW5nbGUnXVsna3AnXSkpLnJlcGxhY2UoJ3twaWRzX2FuZ2xlX2tkfScsc3RyKHBpZHNbJ2FuZ2xlJ11bJ2tkJ10pKS5yZXBsYWNlKCd7cGlkc19hbmdsZV9rc30nLHN0cihwaWRzWydhbmdsZSddWydrcyddKSkKICAgIG90aGVycyA9IGNmZ1snb3RoZXJzJ10KICAgIGNvZGVoID0gY29kZWgucmVwbGFjZSgne3Nob290X2Rpc3R9JyxzdHIob3RoZXJzWydzaG9vdF9kaXN0J10pKQogICAgY29kZWggPSBjb2RlaC5yZXBsYWNlKCd7dHJpX21vdG9yc30nLCcnIGlmIGNmZ1sndHJpX21vdG9ycyddIGVsc2UgJy8vJykucmVwbGFjZSgne3Rvd2FyZH0nLHN0cihjZmdbJ3Rvd2FyZCddKSkKICAgIG1vZGVzID0gY2ZnWydtb2QnXQogICAgY29kZWggPSBjb2RlaC5yZXBsYWNlKCd7bmVlZF9jYWxpYn0nLCdmYWxzZScgaWYgbW9kZXNbJ2RyaXZlX3Rlc3QnXSBlbHNlICd0cnVlJykKICAgIGNvZGVoID0gY29kZWgucmVwbGFjZSgne2RpYWdub30nLCd0cnVlJyBpZiBtb2Rlc1snZGlhZ25vJ10gZWxzZSAnZmFsc2UnKQogICAgcHJpbnRvaygnW0RPTkVdJykKICAgIAogICAgcHJpbnQoJ0dlbmVyYXRlIGBxY2hhc2lzLmNwcGAgd2l0aCBgY2hhc2lzLnlhbWxgIC4uLicsZW5kPScnLGZsdXNoPVRydWUpCiAgICBjb2RlY3BwID0gY29kZWNwcC5yZXBsYWNlKCd7dGVhbX0nLGNmZ1sndGVhbSddKQogICAgcHJpbnRvaygnW0RPTkVdJykKICAgIHByaW50KCdXcml0ZSB0byBmaWxlIC4uLicsZW5kPScnLGZsdXNoPVRydWUpCiAgICB0cnk6CiAgICAgICAgd2l0aCBvcGVuKCdzcmMvcWNoYXNpcy5jcHAnLCd3JyxlbmNvZGluZz0ndXRmLTgnLG5ld2xpbmU9JycpIGFzIGY6CiAgICAgICAgICAgIGYud3JpdGUoY29kZWNwcCkKICAgICAgICB3aXRoIG9wZW4oJ2luY2x1ZGUvcWNoYXNpcy5oJywndycsZW5jb2Rpbmc9J3V0Zi04JyxuZXdsaW5lPScnKSBhcyBmOgogICAgICAgICAgICBmLndyaXRlKGNvZGVoKQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHByaW50ZXJyKCdGYWlsIHRvIHdyaXRlIHRvIGZpbGUnKQogICAgICAgIHJldHVybiBGYWxzZQogICAgcHJpbnRvaygnW0RPTkVdJykKICAgIHByaW50b2soJyoqKioqKioqKioqKioqKiBRR0VOIEZJTklTSEVEICoqKioqKioqKioqKioqKicpCiAgICBpZiBub3QgaXNwcm9zOgogICAgICAgIHJldHVybiBUcnVlCiAgICBydW5jbWQoJ0Bwcm9zIG1ha2UnKQogICAgcHJpbnRvaygnW0RPTkVdJykKICAgIHJldHVybiBUcnVlCgpkZWYgdXBkYXRlKHZlcik6CiAgICBpZiBub3QgdXBkYXRlc3JjKCk6CiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICB0cnk6CiAgICAgICAgd2l0aCBvcGVuKCdxdGVtcGxhdGUvY2hhc2lzLnlhbWwnLCdyKycsZW5jb2Rpbmc9J3V0Zi04JykgYXMgZjoKICAgICAgICAgICAgZi5zZWVrKDApCiAgICAgICAgICAgIGYud3JpdGUoJ3ZlcjogJytzdHIodmVyKSkKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBwcmludChlKQogICAgICAgIHByaW50ZXJyKCdGYWlsIHRvIGxvYWQgY2hhc2lzLnlhbWwhJykKICAgICAgICByZXR1cm4gRmFsc2UKICAgIHJldHVybiBUcnVlCiAgICAKZGVmIHVwZGF0ZWMoKToKICAgIHByaW50KCJDaGVja2luZyB1cGRhdGUgLi4uIikKICAgIHMgPSBnZXRjZmcoKQogICAgaWYgcz09Jyc6CiAgICAgICAgcHJpbnRlcnIoJ0ZhaWwgdG8gY29ubmV0IHRvIHNlcnZlcicpCiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICBzID0geWFtbC5sb2FkKHMseWFtbC5GdWxsTG9hZGVyKQogICAgaWYgc1snY3ZlciddID52ZXJzaW9uOgogICAgICAgIHByaW50d2FybignSEVZISBDdXJyZW50IGBxZ2VuLnB5YCBpcyBub3QgVVAtVE8tREFURSEnKQogICAgICAgIHByaW50d2FybignUmVhZHkgdG8gdXBkYXRlPycpCiAgICAgICAgaWYgbm90IHllc29ybm8oKToKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgcHJpbnQoJ1tSRUNWXSBxZ2VuLnB5IC4uLicsZW5kPScnLGZsdXNoPVRydWUpCiAgICAgICAgbnB5ID0gZ2V0cHkoKQogICAgICAgIGlmIG5weSA9PSAnJzoKICAgICAgICAgICAgcHJpbnRlcnIoJ0JhZCBGb3JtYXQgZm9yIHFnZW4ucHkgUmVjZWl2ZWQhJykKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgcHJpbnRvaygnW0RPTkVdJykKICAgICAgICB0cnk6CiAgICAgICAgICAgIHdpdGggb3BlbigncWdlbl9uZXcucHknLCd3JyxuZXdsaW5lPScnLGVuY29kaW5nPSd1dGYtOCcpIGFzIGY6CiAgICAgICAgICAgICAgICBmLndyaXRlKG5weSkKICAgICAgICAgICAgd2l0aCBvcGVuKCdxbWFrZS5iYXQnLCd3JyxlbmNvZGluZz0ndXRmLTgnLG5ld2xpbmU9JycpYXMgZjoKICAgICAgICAgICAgICAgIGYud3JpdGUoJ0BkZWwgcWdlbi5weVxuQG1vdmUgcWdlbl9uZXcucHkgcWdlbi5weVxuQGRlbCBxbWFrZS5iYXQnKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcHJpbnRlcnIoJ0ZhaWwgdG8gd3JpdGUgdG8gcWdlbl9uZXcucHknKQogICAgICAgIHByaW50KCdFeGVjdXRlIGF1dG8tdXBkYXRlIHNjcmlwdC4uLicpCiAgICAgICAgc3VicHJvY2Vzcy5Qb3BlbigncW1ha2UuYmF0JyxjcmVhdGlvbmZsYWdzPXN1YnByb2Nlc3MuQ1JFQVRFX05FV19DT05TT0xFKQogICAgICAgIHN5cy5leGl0KCkKICAgIHByaW50KCdOb3QgbmVjY2Vzc2FyeSB0byB1cGRhdGUhJykKaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoKICAgIGFyZ3MgPSBzeXMuYXJndgogICAgYXJnYyA9IGxlbihhcmdzKQogICAgaWYgYXJnYyAhPSAyOgogICAgICAgIHByb21wdCgpCiAgICBlbHNlOgogICAgICAgIGNtZCA9IGFyZ3NbMV0KICAgICAgICBpZiBjbWQgPT0gJ3Zlcic6CiAgICAgICAgICAgIHByaW50KCdRLWdlbiB2ZXJzaW9uOiAnK3N0cih2ZXJzaW9uKSsnLCBhdXRob3I6IHFpdWZ1eXUnKQogICAgICAgICAgICBzeXMuZXhpdCgpCiAgICAgICAgaWYgbm90IGNoZWNrZW52KCk6CiAgICAgICAgICAgIHByaW50ZXJyKCJRdGVtcGxhdGUgRW52aXJvbm1lbnQgTm90IEZvdW5kIGluIEN1cnJlbnQgUGF0aCIpCiAgICAgICAgICAgIGNyZWF0ZWVudigpCiAgICAgICAgaWYgY21kID09ICdidWlsZCc6CiAgICAgICAgICAgIHByaW50KCJSZWFkeSB0byBidWlsZCB0ZW1wbGF0ZSAuLi4iKQogICAgICAgICAgICBidWlsZChUcnVlKQogICAgICAgIGVsaWYgY21kID09ICdtYWtlJzoKICAgICAgICAgICAgYnVpbGQoRmFsc2UpCiAgICAgICAgZWxpZiBjbWQgPT0gJ3VwZGF0ZSc6CiAgICAgICAgICAgIHByaW50KCJSZWFkeSB0byBjaGVjayB2ZXJzaW9uIC4uLiIpCiAgICAgICAgICAgIHYgPSBuZWVkdXBkYXRlKCkKICAgICAgICAgICAgaWYgdiE9MDoKICAgICAgICAgICAgICAgIHByaW50d2FybignSEVZISBDdXJyZW50IHFnZW4gdmVyc2lvbiBpcyBub3QgdXAtdG8tZGF0ZSEnKQogICAgICAgICAgICAgICAgcHJpbnR3YXJuKCdSZWFkeSB0byB1cGRhdGU/JykKICAgICAgICAgICAgICAgIGlmIHllc29ybm8oKToKICAgICAgICAgICAgICAgICAgICBpZiB1cGRhdGUodik6CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50b2soJ1tET05FXScpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBwcmludCgnQ3VycmVudCBpcyBhbHJlYWR5IHRoZSBsYXRlc3QgdmVyc2lvbiEnKQogICAgICAgIGVsaWYgY21kID09ICd1cGxvYWQnOgogICAgICAgICAgICBydW5jbWQoJ0Bwcm9zIHVwbG9hZCcpCiAgICAgICAgZWxpZiBjbWQgPT0gJ3VwZGF0ZWMnOgogICAgICAgICAgICB1cGRhdGVjKCk="
lll11ll(lll11l1(out).decode())